(()=>{"use strict";var t={426:(t,e,n)=>{n.d(e,{Z:()=>p});var r=n(537),o=n.n(r),a=n(645),i=n.n(a),s=n(667),c=n.n(s),d=new URL(n(266),n.b),u=new URL(n(307),n.b),l=i()(o()),A=c()(d),m=c()(u);l.push([t.id,`/* FONTS */\n\n@font-face {\n    font-family: 'Roboto';\n    src: url(${A}) format('woff2'),\n        url(${m}) format('woff');\n    font-weight: normal;\n    font-style: normal;\n    font-display: swap;\n}\n\n/* http://meyerweb.com/eric/tools/css/reset/ \n   v2.0 | 20110126\n   License: none (public domain)\n*/\n\nhtml, body, div, span, applet, object, iframe,\nh1, h2, h3, h4, h5, h6, p, blockquote, pre,\na, abbr, acronym, address, big, cite, code,\ndel, dfn, em, img, ins, kbd, q, s, samp,\nsmall, strike, strong, sub, sup, tt, var,\nb, u, i, center,\ndl, dt, dd, ol, ul, li,\nfieldset, form, label, legend,\ntable, caption, tbody, tfoot, thead, tr, th, td,\narticle, aside, canvas, details, embed, \nfigure, figcaption, footer, header, hgroup, \nmenu, nav, output, ruby, section, summary,\ntime, mark, audio, video {\n\tmargin: 0;\n\tpadding: 0;\n\tborder: 0;\n\tfont-size: 100%;\n\tvertical-align: baseline;\n}\n/* HTML5 display-role reset for older browsers */\narticle, aside, details, figcaption, figure, \nfooter, header, hgroup, menu, nav, section {\n\tdisplay: block;\n}\nol, ul {\n\tlist-style: none;\n}\nblockquote, q {\n\tquotes: none;\n}\nblockquote:before, blockquote:after,\nq:before, q:after {\n\tcontent: '';\n\tcontent: none;\n}\ntable {\n\tborder-collapse: collapse;\n\tborder-spacing: 0;\n}\n\n/* STYLING */\n\n:root {\n\t--background-color: #ccfbf1;\n\t--main-color: #5eead4;\n\t--secondary-color: #99f6e4;\n\t--selected-color: #14b8a6;\n\t--note-color: #fef9c3;\n\t--note-select-color: #e0dcad;\n\t--warning-color: #fbbf24;\n\t--button-color: #22c55e;\n\t--button-select-color: #15803d;\n\n\t--min-width: max(250px, 100vw);\n\n\t--area-one: 1 / 1 / 2 / end;\n\t--area-two: 2 / 1 / 3 / 2;\n\t--area-three: 2 / 2 / 3 / end;\n\n\tmax-width: 100%;\n\n\tbox-sizing: border-box;\n\n    font-family: 'Roboto', sans-serif;\n\tfont-size: min((0.02 * var(--min-width)), 16px);\n\n\toverflow: hidden;\n\tword-break: normal;\n}\n\n*::-webkit-scrollbar {\n\twidth: 0.5rem;\n  }\n   \n  *::-webkit-scrollbar-track {\n\tbox-shadow: inset 0 0 6px var(--selected-color);\n  }\n   \n  *::-webkit-scrollbar-thumb {\n\tbackground-color: darkgrey;\n  }\n\nhtml {\n\twidth: 100vw;\n\theight: 100vh;\n\n\tmin-width: var(--min-width);\n}\n\nbody {\n\tposition: relative;\n\t\n\twidth: 100%;\n\theight: 100%;\n\n\tdisplay: flex;\n\tjustify-content: center;\n\tbackground-color: rgb(114, 114, 114);\n}\n\nbutton {\n\theight: 1.8rem;\n\tpadding: 0.25rem 0.5rem;\n\n\tfont-size: 1rem;\n\ttext-align: center;\n\n\tborder-radius: 0.5rem;\n\tborder: none;\n\tbox-shadow: black 1px 1px 1px;\n\n\tbackground-color: var(--button-color);\n}\n\nbutton:active {\n\tbackground-color: var(--button-select-color);\n\n\tbox-shadow: inset 0.05rem 0.05rem 0.05rem;\n}\n\nbutton:hover {\n\tcursor: pointer;\n}\n\nimg {\n\tpointer-events: none;\n}\n\n.delete-button,\n.task-incomplete {\n\tbackground-color: red;\n\tdisplay: flex;\n\tjustify-content: center;\n\talign-items: center;\n}\n\n.delete-button:active,\n.task-incomplete:active {\n\tbackground-color: darkred;\n\n\tbox-shadow: inset 0.05rem 0.05rem 0.05rem;\n}\n\n.delete-button > img {\n\theight: 100%;\n\talign-self: center;\n}\n\nh3 {\n\tfont-size: 1.5rem;\n\tfont-weight: bold;\n}\n\ninput {\n\tfont-size: 1rem;\n}\n\n#content {\n\tflex: 1;\n\n\tmax-width: 1400px;\n\theight: 100%;\n\t\n\tdisplay: grid;\n\tgrid-template-columns: 15rem repeat(4, 1fr);\n\tgrid-template-rows: max(4rem, 40px) 1fr;\n}\n\n.selected { \n\toutline: black 2px solid;\n}\n\n#nav-bar {\n\tgrid-area: var(--area-one);\n\n\tdisplay: flex;\n\talign-items: center;\n\tjustify-content: flex-start;\n\n\tbackground-color:var(--main-color);\n}\n\n/* contact */\n#nav-bar span:nth-last-child(2) {\n\ttext-decoration: line-through;\n}\n\n/* calendar */\n#nav-bar span:nth-last-child(3) {\n\ttext-decoration: line-through;\n}\n\n#nav-bar > * {\t\n\tmargin: 0 0 0 3rem;\n}\n\n#nav-bar > *:hover {\n\tcursor: pointer;\n}\n\n#logo {\n\tfont-size: 2.5rem;\n\tfont-weight: bold;\n\n\tmargin-left: 2rem;\n}\n\n#create-task {\n\tmargin: 0 1rem 0 auto;\n}\n\n#side-bar {\n\tgrid-area: var(--area-two);\n\n\tdisplay: flex;\n\tflex-direction: column;\n\tjustify-content: start;\n\talign-items: center;\n\n\tpadding: 1rem 0.5rem 0.5rem;\n\n\toverflow-y: auto;\n\n\tbackground-color: var(--secondary-color);\n}\n\n#side-bar > button:hover,\n#side-bar > div > *:hover {\n\tcursor: pointer;\n}\n\n#side-bar > button {\n\twidth: 90%;\n}\n\n.project-widget-container {\n\twidth: 100%;\n\n\tmargin-top: 1rem;\n\n\toverflow-y: auto;\n\n\tbackground-color: var(--secondary-color);\n}\n\n.project-widget {\t\n\tmin-height: 5rem;\n\tmargin: 0.5rem;\n\n\tborder-radius: 1rem;\n\tbox-shadow: darkgrey 1px 1px 1px;\n\n\tdisplay: grid;\n\tgrid-template-columns: 2.5rem 1fr;\n\talign-items: center;\n\tjustify-items: center;\n\ttext-align: center;\n\n\tfont-size: 1.5rem;\n\n\toverflow: hidden;\n\tword-break: keep-all;\n\n\tbackground-color: var(--note-color);\n}\n\n.project-widget:active,\n.task-widget:active {\n\tbackground-color: var(--note-select-color);\n}\n\n.project-widget > p {\n\tpadding: 0.5rem;\n\tpointer-events: none;\n}\n\n.project-widget button {\n\theight: 100%;\n\twidth: 100%;\n\tbox-shadow: none;\n\tborder-radius: 0;\n}\n\n.project-widget button > img {\n\twidth: 100%;\n\theight: auto;\n}\n\n.main-content {\n\tgrid-area: var(--area-three);\n\n\tdisplay: grid;\n\tgrid-template-columns: 1fr;\n\tgrid-template-rows: 2fr 3fr;\n\n\toverflow-y: auto;\n\n\tbox-shadow: darkgray inset 1px 1px 1px;\n\tbackground-color: var(--background-color);\n}\n\n.task-widget-container,\n.task-information {\n\tpadding: 1rem;\n\t\n\tborder-radius: 1rem;\n}\n\n.task-widget-container {\n\tdisplay: grid;\n\tgrid-auto-rows: 3rem;\n\n\tmargin: 1rem;\n\tpadding: 1rem;\n\n\toverflow-y: auto;\n\n\tbackground-color: var(--secondary-color);\n}\n\n.task-widget {\n\tdisplay: grid;\n\tgrid-template-columns: 1fr 5rem 2rem 3rem;\n\n\talign-items: center;\n\tjustify-items: left;\n\n\tmargin: 0.2rem;\n\tpadding: 0.2rem 0.5rem;\n\n\tfont-size: 0.8rem;\n\n\tborder-radius: 0.5rem;\n\n\tbackground-color: var(--note-color);\n}\n\n.task-widget:hover {\n\tcursor: pointer;\n}\n\n.task-widget input {\n\twidth: 1rem;\n\theight: 1rem;\n\n\tcursor: pointer;\n}\n\n.task-widget button:last-child {\n\tmargin-left: auto;\n}\n\n.task-information {\t\n\tmargin: 0 1rem 1rem;\n\n\tbackground-color: var(--secondary-color);\n}\n\n.task-information > ul {\n\tdisplay: flex;\n\tflex-direction: column;\n\twidth: 100%;\n}\n\n.task-information ul > *:not(:first-child) {\n\tmargin-top: 1rem;\n}\n\n.task-information .task-title {\n\tfont-weight: bold;\n\tfont-size: 1.2rem;\n}\n\n.task-information > button {\n\twidth: 80%;\n\t\n\talign-self: center;\n}\n\n.task-information > ul > div {\n\tdisplay: flex;\n}\n\n.task-information > ul > div > button {\n\theight: 1.2rem;\n\twidth: 1.2rem;\n\n\tmargin-left: 0.5rem;\n\tpadding: 0.1rem;\n\n\tdisplay: flex;\n\tjustify-content: center;\n\talign-items: center;\n\n\tborder-radius: 0.2rem;\n\n\tbackground: none;\n\tbox-shadow: none;\n}\n\n.task-information > ul > div > button:active {\n\tbackground: fixed;\n\tbackground-color: var(--main-color);\n}\n\n.task-information > ul img {\n\theight: 100%;\n}\n\n/* INPUT WINDOW */\n\n#popUp {\n\tposition: absolute;\n\ttop: 50%;\n\tleft: 50%;\n\n\ttranslate: -50% -50%;\n\n\tdisplay: flex;\n\tflex-direction: column;\n\n\tpadding: 1rem;\n\n\tborder: black solid 1px;\n\tborder-radius: 1rem;\n\n\tbox-shadow: black 0.1rem 0.1rem 0.1rem;\n\n\tbackground-color: var(--main-color);\n}\n\n#popUp form {\n\tdisplay: flex;\n\tflex-direction: column;\n}\n\n#popUp form > div {\n\tdisplay: grid;\n\tgrid-template-columns: 1fr 2fr;\n\talign-items: center;\n\tjustify-items: center;\n}\n\n#popUp form > div > * {\n\tdisplay: flex;\n\tmargin: 0.2rem;\n\talign-items: center;\n\n\tborder: none;\n\tborder-radius: 0.1rem;\n}\n\n#popUp form > div > *:invalid {\n\toutline: 1px solid red;\n}\n\n#popUp form > div > *:valid {\n\toutline: 1px solid green;\n}\n\n#popUp p {\n\tmargin-right: auto;\n}\n\n#popUp .popUp-header {\n\tdisplay: flex;\n\n\tmargin-bottom: 0.5rem;\n}\n\n#popUp .popUp-header h3 {\n\tmargin-right: auto;\n}\n\n#popUp .popUp-header button {\n\tflex: none;\n\n\talign-items: center;\n\n\tbackground-color: #dc2626;\n\n\tborder-radius: 50%;\n\n\tbox-shadow: none;\n}\n\n#popUp input {\n\twidth: 100%;\n\tpadding: 1px;\n\tmargin: 1px;\n}\n\n#popUp .popUp-header button:active {\n\tbackground-color: darkred;\n\n\tbox-shadow: inset 0.05rem 0.05rem 0.05rem black;\n}\n\n#popUp button:hover {\n\tcursor: pointer;\n}\n\n#popUp .submit-button {\n\tmargin-top: 0.5rem;\n}`,"",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"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",sourcesContent:["/* FONTS */\n\n@font-face {\n    font-family: 'Roboto';\n    src: url('./fonts/Roboto-Regular.woff2') format('woff2'),\n        url('./fonts/Roboto-Regular.woff') format('woff');\n    font-weight: normal;\n    font-style: normal;\n    font-display: swap;\n}\n\n/* http://meyerweb.com/eric/tools/css/reset/ \n   v2.0 | 20110126\n   License: none (public domain)\n*/\n\nhtml, body, div, span, applet, object, iframe,\nh1, h2, h3, h4, h5, h6, p, blockquote, pre,\na, abbr, acronym, address, big, cite, code,\ndel, dfn, em, img, ins, kbd, q, s, samp,\nsmall, strike, strong, sub, sup, tt, var,\nb, u, i, center,\ndl, dt, dd, ol, ul, li,\nfieldset, form, label, legend,\ntable, caption, tbody, tfoot, thead, tr, th, td,\narticle, aside, canvas, details, embed, \nfigure, figcaption, footer, header, hgroup, \nmenu, nav, output, ruby, section, summary,\ntime, mark, audio, video {\n\tmargin: 0;\n\tpadding: 0;\n\tborder: 0;\n\tfont-size: 100%;\n\tvertical-align: baseline;\n}\n/* HTML5 display-role reset for older browsers */\narticle, aside, details, figcaption, figure, \nfooter, header, hgroup, menu, nav, section {\n\tdisplay: block;\n}\nol, ul {\n\tlist-style: none;\n}\nblockquote, q {\n\tquotes: none;\n}\nblockquote:before, blockquote:after,\nq:before, q:after {\n\tcontent: '';\n\tcontent: none;\n}\ntable {\n\tborder-collapse: collapse;\n\tborder-spacing: 0;\n}\n\n/* STYLING */\n\n:root {\n\t--background-color: #ccfbf1;\n\t--main-color: #5eead4;\n\t--secondary-color: #99f6e4;\n\t--selected-color: #14b8a6;\n\t--note-color: #fef9c3;\n\t--note-select-color: #e0dcad;\n\t--warning-color: #fbbf24;\n\t--button-color: #22c55e;\n\t--button-select-color: #15803d;\n\n\t--min-width: max(250px, 100vw);\n\n\t--area-one: 1 / 1 / 2 / end;\n\t--area-two: 2 / 1 / 3 / 2;\n\t--area-three: 2 / 2 / 3 / end;\n\n\tmax-width: 100%;\n\n\tbox-sizing: border-box;\n\n    font-family: 'Roboto', sans-serif;\n\tfont-size: min((0.02 * var(--min-width)), 16px);\n\n\toverflow: hidden;\n\tword-break: normal;\n}\n\n*::-webkit-scrollbar {\n\twidth: 0.5rem;\n  }\n   \n  *::-webkit-scrollbar-track {\n\tbox-shadow: inset 0 0 6px var(--selected-color);\n  }\n   \n  *::-webkit-scrollbar-thumb {\n\tbackground-color: darkgrey;\n  }\n\nhtml {\n\twidth: 100vw;\n\theight: 100vh;\n\n\tmin-width: var(--min-width);\n}\n\nbody {\n\tposition: relative;\n\t\n\twidth: 100%;\n\theight: 100%;\n\n\tdisplay: flex;\n\tjustify-content: center;\n\tbackground-color: rgb(114, 114, 114);\n}\n\nbutton {\n\theight: 1.8rem;\n\tpadding: 0.25rem 0.5rem;\n\n\tfont-size: 1rem;\n\ttext-align: center;\n\n\tborder-radius: 0.5rem;\n\tborder: none;\n\tbox-shadow: black 1px 1px 1px;\n\n\tbackground-color: var(--button-color);\n}\n\nbutton:active {\n\tbackground-color: var(--button-select-color);\n\n\tbox-shadow: inset 0.05rem 0.05rem 0.05rem;\n}\n\nbutton:hover {\n\tcursor: pointer;\n}\n\nimg {\n\tpointer-events: none;\n}\n\n.delete-button,\n.task-incomplete {\n\tbackground-color: red;\n\tdisplay: flex;\n\tjustify-content: center;\n\talign-items: center;\n}\n\n.delete-button:active,\n.task-incomplete:active {\n\tbackground-color: darkred;\n\n\tbox-shadow: inset 0.05rem 0.05rem 0.05rem;\n}\n\n.delete-button > img {\n\theight: 100%;\n\talign-self: center;\n}\n\nh3 {\n\tfont-size: 1.5rem;\n\tfont-weight: bold;\n}\n\ninput {\n\tfont-size: 1rem;\n}\n\n#content {\n\tflex: 1;\n\n\tmax-width: 1400px;\n\theight: 100%;\n\t\n\tdisplay: grid;\n\tgrid-template-columns: 15rem repeat(4, 1fr);\n\tgrid-template-rows: max(4rem, 40px) 1fr;\n}\n\n.selected { \n\toutline: black 2px solid;\n}\n\n#nav-bar {\n\tgrid-area: var(--area-one);\n\n\tdisplay: flex;\n\talign-items: center;\n\tjustify-content: flex-start;\n\n\tbackground-color:var(--main-color);\n}\n\n/* contact */\n#nav-bar span:nth-last-child(2) {\n\ttext-decoration: line-through;\n}\n\n/* calendar */\n#nav-bar span:nth-last-child(3) {\n\ttext-decoration: line-through;\n}\n\n#nav-bar > * {\t\n\tmargin: 0 0 0 3rem;\n}\n\n#nav-bar > *:hover {\n\tcursor: pointer;\n}\n\n#logo {\n\tfont-size: 2.5rem;\n\tfont-weight: bold;\n\n\tmargin-left: 2rem;\n}\n\n#create-task {\n\tmargin: 0 1rem 0 auto;\n}\n\n#side-bar {\n\tgrid-area: var(--area-two);\n\n\tdisplay: flex;\n\tflex-direction: column;\n\tjustify-content: start;\n\talign-items: center;\n\n\tpadding: 1rem 0.5rem 0.5rem;\n\n\toverflow-y: auto;\n\n\tbackground-color: var(--secondary-color);\n}\n\n#side-bar > button:hover,\n#side-bar > div > *:hover {\n\tcursor: pointer;\n}\n\n#side-bar > button {\n\twidth: 90%;\n}\n\n.project-widget-container {\n\twidth: 100%;\n\n\tmargin-top: 1rem;\n\n\toverflow-y: auto;\n\n\tbackground-color: var(--secondary-color);\n}\n\n.project-widget {\t\n\tmin-height: 5rem;\n\tmargin: 0.5rem;\n\n\tborder-radius: 1rem;\n\tbox-shadow: darkgrey 1px 1px 1px;\n\n\tdisplay: grid;\n\tgrid-template-columns: 2.5rem 1fr;\n\talign-items: center;\n\tjustify-items: center;\n\ttext-align: center;\n\n\tfont-size: 1.5rem;\n\n\toverflow: hidden;\n\tword-break: keep-all;\n\n\tbackground-color: var(--note-color);\n}\n\n.project-widget:active,\n.task-widget:active {\n\tbackground-color: var(--note-select-color);\n}\n\n.project-widget > p {\n\tpadding: 0.5rem;\n\tpointer-events: none;\n}\n\n.project-widget button {\n\theight: 100%;\n\twidth: 100%;\n\tbox-shadow: none;\n\tborder-radius: 0;\n}\n\n.project-widget button > img {\n\twidth: 100%;\n\theight: auto;\n}\n\n.main-content {\n\tgrid-area: var(--area-three);\n\n\tdisplay: grid;\n\tgrid-template-columns: 1fr;\n\tgrid-template-rows: 2fr 3fr;\n\n\toverflow-y: auto;\n\n\tbox-shadow: darkgray inset 1px 1px 1px;\n\tbackground-color: var(--background-color);\n}\n\n.task-widget-container,\n.task-information {\n\tpadding: 1rem;\n\t\n\tborder-radius: 1rem;\n}\n\n.task-widget-container {\n\tdisplay: grid;\n\tgrid-auto-rows: 3rem;\n\n\tmargin: 1rem;\n\tpadding: 1rem;\n\n\toverflow-y: auto;\n\n\tbackground-color: var(--secondary-color);\n}\n\n.task-widget {\n\tdisplay: grid;\n\tgrid-template-columns: 1fr 5rem 2rem 3rem;\n\n\talign-items: center;\n\tjustify-items: left;\n\n\tmargin: 0.2rem;\n\tpadding: 0.2rem 0.5rem;\n\n\tfont-size: 0.8rem;\n\n\tborder-radius: 0.5rem;\n\n\tbackground-color: var(--note-color);\n}\n\n.task-widget:hover {\n\tcursor: pointer;\n}\n\n.task-widget input {\n\twidth: 1rem;\n\theight: 1rem;\n\n\tcursor: pointer;\n}\n\n.task-widget button:last-child {\n\tmargin-left: auto;\n}\n\n.task-information {\t\n\tmargin: 0 1rem 1rem;\n\n\tbackground-color: var(--secondary-color);\n}\n\n.task-information > ul {\n\tdisplay: flex;\n\tflex-direction: column;\n\twidth: 100%;\n}\n\n.task-information ul > *:not(:first-child) {\n\tmargin-top: 1rem;\n}\n\n.task-information .task-title {\n\tfont-weight: bold;\n\tfont-size: 1.2rem;\n}\n\n.task-information > button {\n\twidth: 80%;\n\t\n\talign-self: center;\n}\n\n.task-information > ul > div {\n\tdisplay: flex;\n}\n\n.task-information > ul > div > button {\n\theight: 1.2rem;\n\twidth: 1.2rem;\n\n\tmargin-left: 0.5rem;\n\tpadding: 0.1rem;\n\n\tdisplay: flex;\n\tjustify-content: center;\n\talign-items: center;\n\n\tborder-radius: 0.2rem;\n\n\tbackground: none;\n\tbox-shadow: none;\n}\n\n.task-information > ul > div > button:active {\n\tbackground: fixed;\n\tbackground-color: var(--main-color);\n}\n\n.task-information > ul img {\n\theight: 100%;\n}\n\n/* INPUT WINDOW */\n\n#popUp {\n\tposition: absolute;\n\ttop: 50%;\n\tleft: 50%;\n\n\ttranslate: -50% -50%;\n\n\tdisplay: flex;\n\tflex-direction: column;\n\n\tpadding: 1rem;\n\n\tborder: black solid 1px;\n\tborder-radius: 1rem;\n\n\tbox-shadow: black 0.1rem 0.1rem 0.1rem;\n\n\tbackground-color: var(--main-color);\n}\n\n#popUp form {\n\tdisplay: flex;\n\tflex-direction: column;\n}\n\n#popUp form > div {\n\tdisplay: grid;\n\tgrid-template-columns: 1fr 2fr;\n\talign-items: center;\n\tjustify-items: center;\n}\n\n#popUp form > div > * {\n\tdisplay: flex;\n\tmargin: 0.2rem;\n\talign-items: center;\n\n\tborder: none;\n\tborder-radius: 0.1rem;\n}\n\n#popUp form > div > *:invalid {\n\toutline: 1px solid red;\n}\n\n#popUp form > div > *:valid {\n\toutline: 1px solid green;\n}\n\n#popUp p {\n\tmargin-right: auto;\n}\n\n#popUp .popUp-header {\n\tdisplay: flex;\n\n\tmargin-bottom: 0.5rem;\n}\n\n#popUp .popUp-header h3 {\n\tmargin-right: auto;\n}\n\n#popUp .popUp-header button {\n\tflex: none;\n\n\talign-items: center;\n\n\tbackground-color: #dc2626;\n\n\tborder-radius: 50%;\n\n\tbox-shadow: none;\n}\n\n#popUp input {\n\twidth: 100%;\n\tpadding: 1px;\n\tmargin: 1px;\n}\n\n#popUp .popUp-header button:active {\n\tbackground-color: darkred;\n\n\tbox-shadow: inset 0.05rem 0.05rem 0.05rem black;\n}\n\n#popUp button:hover {\n\tcursor: pointer;\n}\n\n#popUp .submit-button {\n\tmargin-top: 0.5rem;\n}"],sourceRoot:""}]);const p=l},645:t=>{t.exports=function(t){var e=[];return e.toString=function(){return this.map((function(e){var n="",r=void 0!==e[5];return e[4]&&(n+="@supports (".concat(e[4],") {")),e[2]&&(n+="@media ".concat(e[2]," {")),r&&(n+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),n+=t(e),r&&(n+="}"),e[2]&&(n+="}"),e[4]&&(n+="}"),n})).join("")},e.i=function(t,n,r,o,a){"string"==typeof t&&(t=[[null,t,void 0]]);var i={};if(r)for(var s=0;s<this.length;s++){var c=this[s][0];null!=c&&(i[c]=!0)}for(var d=0;d<t.length;d++){var u=[].concat(t[d]);r&&i[u[0]]||(void 0!==a&&(void 0===u[5]||(u[1]="@layer".concat(u[5].length>0?" ".concat(u[5]):""," {").concat(u[1],"}")),u[5]=a),n&&(u[2]?(u[1]="@media ".concat(u[2]," {").concat(u[1],"}"),u[2]=n):u[2]=n),o&&(u[4]?(u[1]="@supports (".concat(u[4],") {").concat(u[1],"}"),u[4]=o):u[4]="".concat(o)),e.push(u))}},e}},667:t=>{t.exports=function(t,e){return e||(e={}),t?(t=String(t.__esModule?t.default:t),/^['"].*['"]$/.test(t)&&(t=t.slice(1,-1)),e.hash&&(t+=e.hash),/["'() \t\n]|(%20)/.test(t)||e.needQuotes?'"'.concat(t.replace(/"/g,'\\"').replace(/\n/g,"\\n"),'"'):t):t}},537:t=>{t.exports=function(t){var e=t[1],n=t[3];if(!n)return e;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),a="/*# ".concat(o," */");return[e].concat([a]).join("\n")}return[e].join("\n")}},379:t=>{var e=[];function n(t){for(var n=-1,r=0;r<e.length;r++)if(e[r].identifier===t){n=r;break}return n}function r(t,r){for(var a={},i=[],s=0;s<t.length;s++){var c=t[s],d=r.base?c[0]+r.base:c[0],u=a[d]||0,l="".concat(d," ").concat(u);a[d]=u+1;var A=n(l),m={css:c[1],media:c[2],sourceMap:c[3],supports:c[4],layer:c[5]};if(-1!==A)e[A].references++,e[A].updater(m);else{var p=o(m,r);r.byIndex=s,e.splice(s,0,{identifier:l,updater:p,references:1})}i.push(l)}return i}function o(t,e){var n=e.domAPI(e);return n.update(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap&&e.supports===t.supports&&e.layer===t.layer)return;n.update(t=e)}else n.remove()}}t.exports=function(t,o){var a=r(t=t||[],o=o||{});return function(t){t=t||[];for(var i=0;i<a.length;i++){var s=n(a[i]);e[s].references--}for(var c=r(t,o),d=0;d<a.length;d++){var u=n(a[d]);0===e[u].references&&(e[u].updater(),e.splice(u,1))}a=c}}},569:t=>{var e={};t.exports=function(t,n){var r=function(t){if(void 0===e[t]){var n=document.querySelector(t);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(t){n=null}e[t]=n}return e[t]}(t);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(n)}},216:t=>{t.exports=function(t){var e=document.createElement("style");return t.setAttributes(e,t.attributes),t.insert(e,t.options),e}},565:(t,e,n)=>{t.exports=function(t){var e=n.nc;e&&t.setAttribute("nonce",e)}},795:t=>{t.exports=function(t){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var e=t.insertStyleElement(t);return{update:function(n){!function(t,e,n){var r="";n.supports&&(r+="@supports (".concat(n.supports,") {")),n.media&&(r+="@media ".concat(n.media," {"));var o=void 0!==n.layer;o&&(r+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),r+=n.css,o&&(r+="}"),n.media&&(r+="}"),n.supports&&(r+="}");var a=n.sourceMap;a&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),e.styleTagTransform(r,t,e.options)}(e,t,n)},remove:function(){!function(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t)}(e)}}}},589:t=>{t.exports=function(t,e){if(e.styleSheet)e.styleSheet.cssText=t;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(t))}}},307:(t,e,n)=>{t.exports=n.p+"0944be1093c62cedb919.woff"},266:(t,e,n)=>{t.exports=n.p+"9d43b86421e004e704b9.woff2"}},e={};function n(r){var o=e[r];if(void 0!==o)return o.exports;var a=e[r]={id:r,exports:{}};return t[r](a,a.exports,n),a.exports}n.m=t,n.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return n.d(e,{a:e}),e},n.d=(t,e)=>{for(var r in e)n.o(e,r)&&!n.o(t,r)&&Object.defineProperty(t,r,{enumerable:!0,get:e[r]})},n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),n.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),(()=>{var t;n.g.importScripts&&(t=n.g.location+"");var e=n.g.document;if(!t&&e&&(e.currentScript&&(t=e.currentScript.src),!t)){var r=e.getElementsByTagName("script");if(r.length)for(var o=r.length-1;o>-1&&!t;)t=r[o--].src}if(!t)throw new Error("Automatic publicPath is not supported in this browser");t=t.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),n.p=t})(),n.b=document.baseURI||self.location.href,n.nc=void 0,(()=>{var t=n(379),e=n.n(t),r=n(795),o=n.n(r),a=n(569),i=n.n(a),s=n(565),c=n.n(s),d=n(216),u=n.n(d),l=n(589),A=n.n(l),m=n(426),p={};function g(t,e){e.forEach((e=>t.appendChild(e)))}p.styleTagTransform=A(),p.setAttributes=c(),p.insert=i().bind(null,"head"),p.domAPI=o(),p.insertStyleElement=u(),e()(m.Z,p),m.Z&&m.Z.locals&&m.Z.locals;const C=function(){const t={popUpIsShown:!1};return{isShown:function(){return t.popUpIsShown},setTrue:function(){t.popUpIsShown=!0},setFalse:function(){t.popUpIsShown=!1}}}(),f={appendElement:g,popUpState:C,showPopUp:function(t){C.isShown()?console.log("Error: popUp present"):(document.body.appendChild(t),C.setTrue())},closePopUp:function(t){t.preventDefault();var e=document.getElementById("popUp");e.innerHTML=null,e.parentNode.removeChild(e),C.setFalse()},createBasicLabel:function(t,e){const n=document.createElement("label");return n.textContent=t,n.setAttribute("for",e),n},createBasicInput:function(t,e,n){const r=document.createElement("input");return r.setAttribute("type",t),r.setAttribute("id",e),r.setAttribute("name",n),r},wrapInDiv:function(...t){const e=document.createElement("div");return g(e,t),e},multiStopPropogation:function(...t){t.forEach((t=>t.addEventListener("click",(t=>t.stopPropagation()))))}};function h(t){const e=Object.prototype.toString.call(t);return t instanceof Date||"object"==typeof t&&"[object Date]"===e?new t.constructor(+t):"number"==typeof t||"[object Number]"===e||"string"==typeof t||"[object String]"===e?new Date(t):new Date(NaN)}function b(t){if(!(e=t,e instanceof Date||"object"==typeof e&&"[object Date]"===Object.prototype.toString.call(e)||"number"==typeof t))return!1;var e;const n=h(t);return!isNaN(Number(n))}const k={lessThanXSeconds:{one:"less than a second",other:"less than {{count}} seconds"},xSeconds:{one:"1 second",other:"{{count}} seconds"},halfAMinute:"half a minute",lessThanXMinutes:{one:"less than a minute",other:"less than {{count}} minutes"},xMinutes:{one:"1 minute",other:"{{count}} minutes"},aboutXHours:{one:"about 1 hour",other:"about {{count}} hours"},xHours:{one:"1 hour",other:"{{count}} hours"},xDays:{one:"1 day",other:"{{count}} days"},aboutXWeeks:{one:"about 1 week",other:"about {{count}} weeks"},xWeeks:{one:"1 week",other:"{{count}} weeks"},aboutXMonths:{one:"about 1 month",other:"about {{count}} months"},xMonths:{one:"1 month",other:"{{count}} months"},aboutXYears:{one:"about 1 year",other:"about {{count}} years"},xYears:{one:"1 year",other:"{{count}} years"},overXYears:{one:"over 1 year",other:"over {{count}} years"},almostXYears:{one:"almost 1 year",other:"almost {{count}} years"}};function w(t){return(e={})=>{const n=e.width?String(e.width):t.defaultWidth;return t.formats[n]||t.formats[t.defaultWidth]}}const B={date:w({formats:{full:"EEEE, MMMM do, y",long:"MMMM do, y",medium:"MMM d, y",short:"MM/dd/yyyy"},defaultWidth:"full"}),time:w({formats:{full:"h:mm:ss a zzzz",long:"h:mm:ss a z",medium:"h:mm:ss a",short:"h:mm a"},defaultWidth:"full"}),dateTime:w({formats:{full:"{{date}} 'at' {{time}}",long:"{{date}} 'at' {{time}}",medium:"{{date}}, {{time}}",short:"{{date}}, {{time}}"},defaultWidth:"full"})},y={lastWeek:"'last' eeee 'at' p",yesterday:"'yesterday at' p",today:"'today at' p",tomorrow:"'tomorrow at' p",nextWeek:"eeee 'at' p",other:"P"};function v(t){return(e,n)=>{let r;if("formatting"===(n?.context?String(n.context):"standalone")&&t.formattingValues){const e=t.defaultFormattingWidth||t.defaultWidth,o=n?.width?String(n.width):e;r=t.formattingValues[o]||t.formattingValues[e]}else{const e=t.defaultWidth,o=n?.width?String(n.width):t.defaultWidth;r=t.values[o]||t.values[e]}return r[t.argumentCallback?t.argumentCallback(e):e]}}const E={ordinalNumber:(t,e)=>{const n=Number(t),r=n%100;if(r>20||r<10)switch(r%10){case 1:return n+"st";case 2:return n+"nd";case 3:return n+"rd"}return n+"th"},era:v({values:{narrow:["B","A"],abbreviated:["BC","AD"],wide:["Before Christ","Anno Domini"]},defaultWidth:"wide"}),quarter:v({values:{narrow:["1","2","3","4"],abbreviated:["Q1","Q2","Q3","Q4"],wide:["1st quarter","2nd quarter","3rd quarter","4th quarter"]},defaultWidth:"wide",argumentCallback:t=>t-1}),month:v({values:{narrow:["J","F","M","A","M","J","J","A","S","O","N","D"],abbreviated:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],wide:["January","February","March","April","May","June","July","August","September","October","November","December"]},defaultWidth:"wide"}),day:v({values:{narrow:["S","M","T","W","T","F","S"],short:["Su","Mo","Tu","We","Th","Fr","Sa"],abbreviated:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],wide:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},defaultWidth:"wide"}),dayPeriod:v({values:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"}},defaultWidth:"wide",formattingValues:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"}},defaultFormattingWidth:"wide"})};function x(t){return(e,n={})=>{const r=n.width,o=r&&t.matchPatterns[r]||t.matchPatterns[t.defaultMatchWidth],a=e.match(o);if(!a)return null;const i=a[0],s=r&&t.parsePatterns[r]||t.parsePatterns[t.defaultParseWidth],c=Array.isArray(s)?function(t,e){for(let e=0;e<t.length;e++)if(t[e].test(i))return e}(s):function(t,e){for(const e in t)if(Object.prototype.hasOwnProperty.call(t,e)&&t[e].test(i))return e}(s);let d;return d=t.valueCallback?t.valueCallback(c):c,d=n.valueCallback?n.valueCallback(d):d,{value:d,rest:e.slice(i.length)}}}const j={ordinalNumber:(T={matchPattern:/^(\d+)(th|st|nd|rd)?/i,parsePattern:/\d+/i,valueCallback:t=>parseInt(t,10)},(t,e={})=>{const n=t.match(T.matchPattern);if(!n)return null;const r=n[0],o=t.match(T.parsePattern);if(!o)return null;let a=T.valueCallback?T.valueCallback(o[0]):o[0];return a=e.valueCallback?e.valueCallback(a):a,{value:a,rest:t.slice(r.length)}}),era:x({matchPatterns:{narrow:/^(b|a)/i,abbreviated:/^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,wide:/^(before christ|before common era|anno domini|common era)/i},defaultMatchWidth:"wide",parsePatterns:{any:[/^b/i,/^(a|c)/i]},defaultParseWidth:"any"}),quarter:x({matchPatterns:{narrow:/^[1234]/i,abbreviated:/^q[1234]/i,wide:/^[1234](th|st|nd|rd)? quarter/i},defaultMatchWidth:"wide",parsePatterns:{any:[/1/i,/2/i,/3/i,/4/i]},defaultParseWidth:"any",valueCallback:t=>t+1}),month:x({matchPatterns:{narrow:/^[jfmasond]/i,abbreviated:/^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,wide:/^(january|february|march|april|may|june|july|august|september|october|november|december)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^j/i,/^f/i,/^m/i,/^a/i,/^m/i,/^j/i,/^j/i,/^a/i,/^s/i,/^o/i,/^n/i,/^d/i],any:[/^ja/i,/^f/i,/^mar/i,/^ap/i,/^may/i,/^jun/i,/^jul/i,/^au/i,/^s/i,/^o/i,/^n/i,/^d/i]},defaultParseWidth:"any"}),day:x({matchPatterns:{narrow:/^[smtwf]/i,short:/^(su|mo|tu|we|th|fr|sa)/i,abbreviated:/^(sun|mon|tue|wed|thu|fri|sat)/i,wide:/^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^s/i,/^m/i,/^t/i,/^w/i,/^t/i,/^f/i,/^s/i],any:[/^su/i,/^m/i,/^tu/i,/^w/i,/^th/i,/^f/i,/^sa/i]},defaultParseWidth:"any"}),dayPeriod:x({matchPatterns:{narrow:/^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,any:/^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i},defaultMatchWidth:"any",parsePatterns:{any:{am:/^a/i,pm:/^p/i,midnight:/^mi/i,noon:/^no/i,morning:/morning/i,afternoon:/afternoon/i,evening:/evening/i,night:/night/i}},defaultParseWidth:"any"})};var T;const P={code:"en-US",formatDistance:(t,e,n)=>{let r;const o=k[t];return r="string"==typeof o?o:1===e?o.one:o.other.replace("{{count}}",e.toString()),n?.addSuffix?n.comparison&&n.comparison>0?"in "+r:r+" ago":r},formatLong:B,formatRelative:(t,e,n,r)=>y[t],localize:E,match:j,options:{weekStartsOn:0,firstWeekContainsDate:1}};let S={};function D(){return S}Math.pow(10,8);const I=6048e5,M=864e5;function L(t){const e=h(t);return e.setHours(0,0,0,0),e}function q(t){const e=new Date(Date.UTC(t.getFullYear(),t.getMonth(),t.getDate(),t.getHours(),t.getMinutes(),t.getSeconds(),t.getMilliseconds()));return e.setUTCFullYear(t.getFullYear()),t.getTime()-e.getTime()}function N(t,e){return t instanceof Date?new t.constructor(e):new Date(e)}function U(t){const e=h(t);return function(t,e){const n=L(t),r=L(e),o=n.getTime()-q(n),a=r.getTime()-q(r);return Math.round((o-a)/M)}(e,function(t){const e=h(t),n=N(t,0);return n.setFullYear(e.getFullYear(),0,1),n.setHours(0,0,0,0),n}(e))+1}function Y(t,e){const n=D(),r=e?.weekStartsOn??e?.locale?.options?.weekStartsOn??n.weekStartsOn??n.locale?.options?.weekStartsOn??0,o=h(t),a=o.getDay(),i=(a<r?7:0)+a-r;return o.setDate(o.getDate()-i),o.setHours(0,0,0,0),o}function W(t){return Y(t,{weekStartsOn:1})}function O(t){const e=h(t),n=e.getFullYear(),r=N(t,0);r.setFullYear(n+1,0,4),r.setHours(0,0,0,0);const o=W(r),a=N(t,0);a.setFullYear(n,0,4),a.setHours(0,0,0,0);const i=W(a);return e.getTime()>=o.getTime()?n+1:e.getTime()>=i.getTime()?n:n-1}function z(t){const e=h(t),n=W(e).getTime()-function(t){const e=O(t),n=N(t,0);return n.setFullYear(e,0,4),n.setHours(0,0,0,0),W(n)}(e).getTime();return Math.round(n/I)+1}function $(t,e){const n=h(t),r=n.getFullYear(),o=D(),a=e?.firstWeekContainsDate??e?.locale?.options?.firstWeekContainsDate??o.firstWeekContainsDate??o.locale?.options?.firstWeekContainsDate??1,i=N(t,0);i.setFullYear(r+1,0,a),i.setHours(0,0,0,0);const s=Y(i,e),c=N(t,0);c.setFullYear(r,0,a),c.setHours(0,0,0,0);const d=Y(c,e);return n.getTime()>=s.getTime()?r+1:n.getTime()>=d.getTime()?r:r-1}function F(t,e){const n=h(t),r=Y(n,e).getTime()-function(t,e){const n=D(),r=e?.firstWeekContainsDate??e?.locale?.options?.firstWeekContainsDate??n.firstWeekContainsDate??n.locale?.options?.firstWeekContainsDate??1,o=$(t,e),a=N(t,0);return a.setFullYear(o,0,r),a.setHours(0,0,0,0),Y(a,e)}(n,e).getTime();return Math.round(r/I)+1}function H(t,e){return(t<0?"-":"")+Math.abs(t).toString().padStart(e,"0")}const R={y(t,e){const n=t.getFullYear(),r=n>0?n:1-n;return H("yy"===e?r%100:r,e.length)},M(t,e){const n=t.getMonth();return"M"===e?String(n+1):H(n+1,2)},d:(t,e)=>H(t.getDate(),e.length),a(t,e){const n=t.getHours()/12>=1?"pm":"am";switch(e){case"a":case"aa":return n.toUpperCase();case"aaa":return n;case"aaaaa":return n[0];default:return"am"===n?"a.m.":"p.m."}},h:(t,e)=>H(t.getHours()%12||12,e.length),H:(t,e)=>H(t.getHours(),e.length),m:(t,e)=>H(t.getMinutes(),e.length),s:(t,e)=>H(t.getSeconds(),e.length),S(t,e){const n=e.length,r=t.getMilliseconds();return H(Math.floor(r*Math.pow(10,n-3)),e.length)}},X={G:function(t,e,n){const r=t.getFullYear()>0?1:0;switch(e){case"G":case"GG":case"GGG":return n.era(r,{width:"abbreviated"});case"GGGGG":return n.era(r,{width:"narrow"});default:return n.era(r,{width:"wide"})}},y:function(t,e,n){if("yo"===e){const e=t.getFullYear(),r=e>0?e:1-e;return n.ordinalNumber(r,{unit:"year"})}return R.y(t,e)},Y:function(t,e,n,r){const o=$(t,r),a=o>0?o:1-o;return"YY"===e?H(a%100,2):"Yo"===e?n.ordinalNumber(a,{unit:"year"}):H(a,e.length)},R:function(t,e){return H(O(t),e.length)},u:function(t,e){return H(t.getFullYear(),e.length)},Q:function(t,e,n){const r=Math.ceil((t.getMonth()+1)/3);switch(e){case"Q":return String(r);case"QQ":return H(r,2);case"Qo":return n.ordinalNumber(r,{unit:"quarter"});case"QQQ":return n.quarter(r,{width:"abbreviated",context:"formatting"});case"QQQQQ":return n.quarter(r,{width:"narrow",context:"formatting"});default:return n.quarter(r,{width:"wide",context:"formatting"})}},q:function(t,e,n){const r=Math.ceil((t.getMonth()+1)/3);switch(e){case"q":return String(r);case"qq":return H(r,2);case"qo":return n.ordinalNumber(r,{unit:"quarter"});case"qqq":return n.quarter(r,{width:"abbreviated",context:"standalone"});case"qqqqq":return n.quarter(r,{width:"narrow",context:"standalone"});default:return n.quarter(r,{width:"wide",context:"standalone"})}},M:function(t,e,n){const r=t.getMonth();switch(e){case"M":case"MM":return R.M(t,e);case"Mo":return n.ordinalNumber(r+1,{unit:"month"});case"MMM":return n.month(r,{width:"abbreviated",context:"formatting"});case"MMMMM":return n.month(r,{width:"narrow",context:"formatting"});default:return n.month(r,{width:"wide",context:"formatting"})}},L:function(t,e,n){const r=t.getMonth();switch(e){case"L":return String(r+1);case"LL":return H(r+1,2);case"Lo":return n.ordinalNumber(r+1,{unit:"month"});case"LLL":return n.month(r,{width:"abbreviated",context:"standalone"});case"LLLLL":return n.month(r,{width:"narrow",context:"standalone"});default:return n.month(r,{width:"wide",context:"standalone"})}},w:function(t,e,n,r){const o=F(t,r);return"wo"===e?n.ordinalNumber(o,{unit:"week"}):H(o,e.length)},I:function(t,e,n){const r=z(t);return"Io"===e?n.ordinalNumber(r,{unit:"week"}):H(r,e.length)},d:function(t,e,n){return"do"===e?n.ordinalNumber(t.getDate(),{unit:"date"}):R.d(t,e)},D:function(t,e,n){const r=U(t);return"Do"===e?n.ordinalNumber(r,{unit:"dayOfYear"}):H(r,e.length)},E:function(t,e,n){const r=t.getDay();switch(e){case"E":case"EE":case"EEE":return n.day(r,{width:"abbreviated",context:"formatting"});case"EEEEE":return n.day(r,{width:"narrow",context:"formatting"});case"EEEEEE":return n.day(r,{width:"short",context:"formatting"});default:return n.day(r,{width:"wide",context:"formatting"})}},e:function(t,e,n,r){const o=t.getDay(),a=(o-r.weekStartsOn+8)%7||7;switch(e){case"e":return String(a);case"ee":return H(a,2);case"eo":return n.ordinalNumber(a,{unit:"day"});case"eee":return n.day(o,{width:"abbreviated",context:"formatting"});case"eeeee":return n.day(o,{width:"narrow",context:"formatting"});case"eeeeee":return n.day(o,{width:"short",context:"formatting"});default:return n.day(o,{width:"wide",context:"formatting"})}},c:function(t,e,n,r){const o=t.getDay(),a=(o-r.weekStartsOn+8)%7||7;switch(e){case"c":return String(a);case"cc":return H(a,e.length);case"co":return n.ordinalNumber(a,{unit:"day"});case"ccc":return n.day(o,{width:"abbreviated",context:"standalone"});case"ccccc":return n.day(o,{width:"narrow",context:"standalone"});case"cccccc":return n.day(o,{width:"short",context:"standalone"});default:return n.day(o,{width:"wide",context:"standalone"})}},i:function(t,e,n){const r=t.getDay(),o=0===r?7:r;switch(e){case"i":return String(o);case"ii":return H(o,e.length);case"io":return n.ordinalNumber(o,{unit:"day"});case"iii":return n.day(r,{width:"abbreviated",context:"formatting"});case"iiiii":return n.day(r,{width:"narrow",context:"formatting"});case"iiiiii":return n.day(r,{width:"short",context:"formatting"});default:return n.day(r,{width:"wide",context:"formatting"})}},a:function(t,e,n){const r=t.getHours()/12>=1?"pm":"am";switch(e){case"a":case"aa":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"aaa":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"}).toLowerCase();case"aaaaa":return n.dayPeriod(r,{width:"narrow",context:"formatting"});default:return n.dayPeriod(r,{width:"wide",context:"formatting"})}},b:function(t,e,n){const r=t.getHours();let o;switch(o=12===r?"noon":0===r?"midnight":r/12>=1?"pm":"am",e){case"b":case"bb":return n.dayPeriod(o,{width:"abbreviated",context:"formatting"});case"bbb":return n.dayPeriod(o,{width:"abbreviated",context:"formatting"}).toLowerCase();case"bbbbb":return n.dayPeriod(o,{width:"narrow",context:"formatting"});default:return n.dayPeriod(o,{width:"wide",context:"formatting"})}},B:function(t,e,n){const r=t.getHours();let o;switch(o=r>=17?"evening":r>=12?"afternoon":r>=4?"morning":"night",e){case"B":case"BB":case"BBB":return n.dayPeriod(o,{width:"abbreviated",context:"formatting"});case"BBBBB":return n.dayPeriod(o,{width:"narrow",context:"formatting"});default:return n.dayPeriod(o,{width:"wide",context:"formatting"})}},h:function(t,e,n){if("ho"===e){let e=t.getHours()%12;return 0===e&&(e=12),n.ordinalNumber(e,{unit:"hour"})}return R.h(t,e)},H:function(t,e,n){return"Ho"===e?n.ordinalNumber(t.getHours(),{unit:"hour"}):R.H(t,e)},K:function(t,e,n){const r=t.getHours()%12;return"Ko"===e?n.ordinalNumber(r,{unit:"hour"}):H(r,e.length)},k:function(t,e,n){let r=t.getHours();return 0===r&&(r=24),"ko"===e?n.ordinalNumber(r,{unit:"hour"}):H(r,e.length)},m:function(t,e,n){return"mo"===e?n.ordinalNumber(t.getMinutes(),{unit:"minute"}):R.m(t,e)},s:function(t,e,n){return"so"===e?n.ordinalNumber(t.getSeconds(),{unit:"second"}):R.s(t,e)},S:function(t,e){return R.S(t,e)},X:function(t,e,n,r){const o=(r._originalDate||t).getTimezoneOffset();if(0===o)return"Z";switch(e){case"X":return Z(o);case"XXXX":case"XX":return _(o);default:return _(o,":")}},x:function(t,e,n,r){const o=(r._originalDate||t).getTimezoneOffset();switch(e){case"x":return Z(o);case"xxxx":case"xx":return _(o);default:return _(o,":")}},O:function(t,e,n,r){const o=(r._originalDate||t).getTimezoneOffset();switch(e){case"O":case"OO":case"OOO":return"GMT"+Q(o,":");default:return"GMT"+_(o,":")}},z:function(t,e,n,r){const o=(r._originalDate||t).getTimezoneOffset();switch(e){case"z":case"zz":case"zzz":return"GMT"+Q(o,":");default:return"GMT"+_(o,":")}},t:function(t,e,n,r){const o=r._originalDate||t;return H(Math.floor(o.getTime()/1e3),e.length)},T:function(t,e,n,r){return H((r._originalDate||t).getTime(),e.length)}};function Q(t,e=""){const n=t>0?"-":"+",r=Math.abs(t),o=Math.floor(r/60),a=r%60;return 0===a?n+String(o):n+String(o)+e+H(a,2)}function Z(t,e){return t%60==0?(t>0?"-":"+")+H(Math.abs(t)/60,2):_(t,e)}function _(t,e=""){const n=t>0?"-":"+",r=Math.abs(t);return n+H(Math.floor(r/60),2)+e+H(r%60,2)}const G=(t,e)=>{switch(t){case"P":return e.date({width:"short"});case"PP":return e.date({width:"medium"});case"PPP":return e.date({width:"long"});default:return e.date({width:"full"})}},V=(t,e)=>{switch(t){case"p":return e.time({width:"short"});case"pp":return e.time({width:"medium"});case"ppp":return e.time({width:"long"});default:return e.time({width:"full"})}},J={p:V,P:(t,e)=>{const n=t.match(/(P+)(p+)?/)||[],r=n[1],o=n[2];if(!o)return G(t,e);let a;switch(r){case"P":a=e.dateTime({width:"short"});break;case"PP":a=e.dateTime({width:"medium"});break;case"PPP":a=e.dateTime({width:"long"});break;default:a=e.dateTime({width:"full"})}return a.replace("{{date}}",G(r,e)).replace("{{time}}",V(o,e))}},K=["D","DD"],tt=["YY","YYYY"];function et(t,e,n){if("YYYY"===t)throw new RangeError(`Use \`yyyy\` instead of \`YYYY\` (in \`${e}\`) for formatting years to the input \`${n}\`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md`);if("YY"===t)throw new RangeError(`Use \`yy\` instead of \`YY\` (in \`${e}\`) for formatting years to the input \`${n}\`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md`);if("D"===t)throw new RangeError(`Use \`d\` instead of \`D\` (in \`${e}\`) for formatting days of the month to the input \`${n}\`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md`);if("DD"===t)throw new RangeError(`Use \`dd\` instead of \`DD\` (in \`${e}\`) for formatting days of the month to the input \`${n}\`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md`)}const nt=/[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g,rt=/P+p+|P+|p+|''|'(''|[^'])+('|$)|./g,ot=/^'([^]*?)'?$/,at=/''/g,it=/[a-zA-Z]/;function st(t,e,n){const r=D(),o=n?.locale??r.locale??P,a=n?.firstWeekContainsDate??n?.locale?.options?.firstWeekContainsDate??r.firstWeekContainsDate??r.locale?.options?.firstWeekContainsDate??1,i=n?.weekStartsOn??n?.locale?.options?.weekStartsOn??r.weekStartsOn??r.locale?.options?.weekStartsOn??0,s=h(t);if(!b(s))throw new RangeError("Invalid time value");const c={firstWeekContainsDate:a,weekStartsOn:i,locale:o,_originalDate:s};return e.match(rt).map((function(t){const e=t[0];return"p"===e||"P"===e?(0,J[e])(t,o.formatLong):t})).join("").match(nt).map((function(r){if("''"===r)return"'";const a=r[0];if("'"===a)return function(t){const e=t.match(ot);return e?e[1].replace(at,"'"):t}(r);const i=X[a];if(i)return n?.useAdditionalWeekYearTokens||(d=r,-1===tt.indexOf(d))||et(r,e,String(t)),!n?.useAdditionalDayOfYearTokens&&function(t){return-1!==K.indexOf(t)}(r)&&et(r,e,String(t)),i(s,r,o.localize,c);var d;if(a.match(it))throw new RangeError("Format string contains an unescaped latin alphabet character `"+a+"`");return r})).join("")}function ct(t,e){const n=h(t),r=h(e),o=n.getTime()-r.getTime();return o<0?-1:o>0?1:o}const dt={createTask:function(t,e,n,r,o){const a=st(new Date,"yyyy-MM-dd");if(0===Object.keys(ht.getProjects()).length)console.log("Error: No projects, can't create task");else if(mt(t,e,0,r)){const i=ht.getCurrentProjectNum();ht.addTaskToProject(i,{title:t,creationDate:a,dueDate:e,description:n,priority:r,notes:o,completed:!1,taskId:ut,appendTask:pt}),lt=ut,ut++}else console.log("Form filled out improperly!")},getCurrentTask:function(){return ht.getTaskById(lt)},getCurrentTaskNum:function(){return lt},setCurrentTask:function(t){At(ht.getProjects()[`${ht.getCurrentProjectNum()}`].tasks,t)?lt=t:console.log(`Error: Task '${t}' not present in current project`)},setTaskIdCounter:function(t){ut=t},deleteTask:function(t){ht.deleteTaskFromProject(ht.getCurrentProjectNum(),t)},validateInputs:mt,checkIfIdIsPresent:At,reapplyFunctionsToTasks:function(){Object.keys(ht.getProjects()).forEach((t=>{ht.getProjects()[`${t}`].tasks.forEach((t=>{t.appendTask=pt}))}))}};let ut=1,lt=1;function At(t,e){return t.map((t=>t.taskId)).includes(e)}function mt(t,e,n,r,o){return![function(t){return t.length>0&&t.length<=28}(t),function(t){if(t){const e=st(new Date,"yyyy-MM-dd");return-1===ct(e,t)||0===ct(e,t)}return!1}(e),!0,function(t){return t>=1&&t<=5}(r),!0].includes(!1)}const pt=function(t,e,n,r,o){this.title=t,this.dueDate=e,this.description=n,this.priority=r,this.notes=o};function gt(){try{return function(t){let e;try{e=window.localStorage;const t="__storage_test__";return e.setItem(t,t),e.removeItem(t),!0}catch(t){return t instanceof DOMException&&(22===t.code||1014===t.code||"QuotaExceededError"===t.name||"NS_ERROR_DOM_QUOTA_REACHED"===t.name)&&e&&0!==e.length}}()}catch{console.log("Local storage unavailable")}}const Ct=gt()?localStorage:1,ft={checkIfStorageIsAvailable:gt,getStorage:function(){return JSON.parse(Ct.getItem("toDoodleProjects"))},setStorage:function(){Ct.setItem("toDoodleProjects",JSON.stringify(ht.getProjects()))}},ht={setCurrentProject:Bt,setCurrentToLastProject:function(){Bt(Object.keys(bt)[-1])},getProjects:function(){return bt},getCurrentProjectNum:function(){return wt},createProject:function(t){0===Object.keys(bt).length&&(wt=kt),bt[`${kt}`]={title:t,tasks:[]},kt++,ft.setStorage()},getTaskById:function(t){if(0!==Object.keys(bt).length)return bt[`${wt}`].tasks.find((e=>e.taskId===t));console.log("No tasks to get")},addTaskToProject:function(t,e){bt[`${t}`].tasks.push(e),ft.setStorage()},getTaskCount:function(t){return bt[`${t}`].tasks.length},deleteTaskFromProject:function(t,e){bt[`${t}`].tasks.forEach(((n,r)=>{n.taskId===e&&(bt[`${t}`].tasks.splice(r,1),ft.setStorage())}))},deleteProjectById:function(t){delete bt[`${t}`]},projectTitleValidation:function(t){const e=t.split(" ");if(0===t.length||e.some((t=>t.length>10)))return!0}};let bt={},kt=1,wt=1;function Bt(t){Object.keys(bt).includes(t)?(wt=t,console.log(`Current project set to Id: ${t}`)):console.log("Error: project number does not exist")}const yt=ft.getStorage();ft.checkIfStorageIsAvailable()&&null!=yt?(bt=ft.getStorage(),kt=Object.keys(yt).length+1,dt.setTaskIdCounter(function(){let t=0;return Object.keys(bt).forEach((e=>{bt[`${e}`].tasks.forEach((e=>{e.taskId>t&&(t=e.taskId)}))})),t}()+1),dt.reapplyFunctionsToTasks()):("Project A",0===Object.keys(bt).length&&(wt=kt),bt[`${kt}`]={title:"Project A",tasks:[]},kt++,dt.createTask("Example Task","2100-12-30","This is the task's description","1","This is the task's notes"));const vt=n.p+"3f39929bc7b0c7e56989.png",Et=n.p+"422dc9c9b90bb69847fe.png",xt=function(){if(null!=dt.getCurrentTask()){let t=dt.getCurrentTask();const e=document.createElement("li");e.classList="task-title",e.textContent=t.title;const n=document.createElement("button"),r=new Image;r.src=Et,n.appendChild(r),n.addEventListener("click",(()=>f.showPopUp(qt.editTask())));const o=f.wrapInDiv(e,n),a=document.createElement("li");a.textContent=`Date Created: ${t.creationDate}`;const i=document.createElement("li");i.textContent=`Due: ${t.dueDate}`;const s=document.createElement("li");""===t.description?s.textContent="Description: N/A":s.textContent=`Description: ${t.description}`;const c=document.createElement("li");c.textContent=`Priority: ${t.priority}`;const d=document.createElement("li");""===t.notes?d.textContent="Notes: N/A":d.textContent=`Notes: ${t.notes}`;const u=document.createElement("button");u.id="task-complete-button",!0===t.completed?u.textContent="Completed":(u.textContent="Incomplete",u.classList="task-incomplete"),u.addEventListener("click",(e=>{"task-incomplete"===e.target.classList.value?(u.textContent="Completed",t.completed=!0,e.target.classList="",Tt.checkCurrentCheckbox()):(u.textContent="Incomplete",t.completed=!1,e.target.classList="task-incomplete",Tt.uncheckCurrentCheckbox()),ft.setStorage()}));const l=document.querySelector(".task-information");l.innerHTML="";const A=document.createElement("ul");f.appendElement(A,[o,a,i,s,c,d,u]),l.appendChild(A)}},jt=function(){document.querySelector(".task-information").innerHTML=""},Tt={generateProjectWidgets:function(){const t=ht.getProjects()[`${ht.getCurrentProjectNum()}`];function e(){let e=!1;return t.tasks.forEach((t=>{t.taskId===dt.getCurrentTaskNum()&&(e=!0)})),e}const n=t.tasks.map((t=>function(t){const e=document.createElement("div");return t.taskId==dt.getCurrentTaskNum()?e.classList="task-widget selected":e.classList="task-widget",e.setAttribute("data-task-id",`${t.taskId}`),e.addEventListener("click",(t=>{document.querySelectorAll(".task-widget").forEach((t=>t.classList="task-widget"));const e=t.target;e.classList="task-widget selected",dt.setCurrentTask(Number(e.getAttribute("data-task-id"))),xt()})),f.appendElement(e,function(){const n=document.createElement("p");n.textContent=t.title;const r=document.createElement("p");r.textContent=t.dueDate,n.addEventListener("click",(t=>Pt(t))),r.addEventListener("click",(t=>Pt(t))),e.addEventListener("click",(t=>{document.querySelectorAll(".task-widget").forEach((t=>t.classList="task-widget"));const e=t.target;e.classList="task-widget selected",dt.setCurrentTask(Number(e.getAttribute("data-task-id"))),xt()}));const o=f.createBasicInput("input","task-completed","task-completed");o.setAttribute("data-task-checkbox-id",t.taskId),o.type="checkbox",o.textContent="checkBox",!0===t.completed&&(o.checked=!0),o.addEventListener("click",(t=>{if(!0===ht.getTaskById(Number(t.target.getAttribute("data-task-checkbox-id"))).completed){if(ht.getTaskById(Number(t.target.getAttribute("data-task-checkbox-id"))).completed=!1,t.target.checked=!1,Number(t.target.parentElement.getAttribute("data-task-id"))===dt.getCurrentTaskNum()){const t=document.getElementById("task-complete-button");t.textContent="Incomplete",t.classList="task-incomplete"}}else if(!1===ht.getTaskById(Number(t.target.getAttribute("data-task-checkbox-id"))).completed&&(ht.getTaskById(Number(t.target.getAttribute("data-task-checkbox-id"))).completed=!0,t.target.checked=!0,Number(t.target.parentElement.getAttribute("data-task-id"))===dt.getCurrentTaskNum())){const t=document.getElementById("task-complete-button");t.textContent="Complete",t.classList=""}ft.setStorage()}));const a=document.createElement("button");a.classList="delete-button";const i=new Image;return i.src=vt,a.appendChild(i),a.addEventListener("click",(t=>{const e=Number(t.target.parentElement.getAttribute("data-task-id"));dt.deleteTask(e),St.removeTaskById(t.target.parentElement.getAttribute("data-task-id")),ft.setStorage(),e===dt.getCurrentTaskNum()&&jt()})),f.multiStopPropogation(n,r,o,a),[n,r,o,a]}()),e}(t)));return n.length>0&&!e()?n[0].classList="task-widget selected":e()&&(document.querySelectorAll(`[data-task-id="${dt.getCurrentTaskNum()}"]`).classList="task-widget selected"),n},checkCurrentCheckbox:function(){document.querySelector(`[data-task-checkbox-id='${dt.getCurrentTaskNum()}']`).checked=!0},uncheckCurrentCheckbox:function(){document.querySelector(`[data-task-checkbox-id='${dt.getCurrentTaskNum()}']`).checked=!1}};function Pt(t){document.querySelectorAll(".task-widget").forEach((t=>t.classList="task-widget"));const e=t.target.parentElement;e.classList="task-widget selected",dt.setCurrentTask(Number(e.getAttribute("data-task-id"))),xt()}const St={firstLoad:function(){const t=document.createElement("div");return t.classList="main-content",f.appendElement(t,function(){const t=document.createElement("div");t.classList="task-widget-container",0!=Object.keys(ht.getProjects()).length&&f.appendElement(t,Tt.generateProjectWidgets());const e=document.createElement("div");return e.classList="task-information",[t,e]}()),t},clearWidgets:Dt,loadProjectTasks:function(){if(Dt(),0!=Object.keys(ht.getProjects()).length){const t=document.querySelector(".task-widget-container");f.appendElement(t,Tt.generateProjectWidgets())}else console.log("Error: No projects to load task into")},removeTaskById:function(t){document.querySelector(`[data-task-id='${t}']`).outerHTML=""}};function Dt(){document.querySelector(".task-widget-container").innerHTML=""}const It=function(){const t=ht.getProjects(),e=Object.keys(t).map((e=>{const n=document.createElement("div");n.id=e,ht.getCurrentProjectNum()==e?n.classList="project-widget selected":n.classList="project-widget",n.addEventListener("click",(t=>{t.target.classList.contains("selected")||(document.querySelectorAll(".project-widget").forEach((t=>t.classList="project-widget")),t.target.classList="project-widget selected",ht.setCurrentProject(t.target.id),St.loadProjectTasks(t.target.id),jt(),0!=ht.getProjects()[`${ht.getCurrentProjectNum()}`].tasks.length&&(dt.setCurrentTask(ht.getProjects()[`${t.target.id}`].tasks[0].taskId),xt()))}));const r=document.createElement("p");r.textContent=t[`${e}`].title;const o=document.createElement("button");o.type="button",o.classList="delete-button";const a=new Image;return a.src=vt,o.appendChild(a),o.addEventListener("click",(t=>{if(t.stopPropagation(),ht.getCurrentProjectNum()==t.target.parentElement.getAttribute("id")&&dt.checkIfIdIsPresent(ht.getProjects()[`${ht.getCurrentProjectNum()}`].tasks,dt.getCurrentTaskNum())&&jt(),ht.deleteProjectById(t.target.parentElement.getAttribute("id")),ft.setStorage(),t.target.parentElement.getAttribute("id")==ht.getCurrentProjectNum()&&(St.clearWidgets(),Object.keys(ht.getProjects()).length>0&&t.target.parentElement.getAttribute("id"))){const t=Object.keys(ht.getProjects());ht.setCurrentProject(t[t.length-1]),St.loadProjectTasks()}Mt.regenerateProjects()})),f.appendElement(n,[o,r]),n}));return e},Mt={firstLoad:function(){const t=document.createElement("div");return t.id="side-bar",f.appendElement(t,function(){const t=document.createElement("button");return t.id="create-project",t.textContent="Create Project",t.addEventListener("click",(()=>{f.showPopUp(qt.project())})),f.appendElement(Lt,It()),[t,Lt]}()),t},regenerateProjects:function(){Lt.innerHTML="",f.appendElement(Lt,It())}},Lt=document.createElement("div");Lt.classList="project-widget-container";const qt={project:function(){if(!f.popUpState.isShown()){const t=Nt;function e(){const t=Ut("Create Project"),e=f.createBasicLabel("Title:","project-title-input"),n=f.createBasicInput("text","project-title-input","project-title-input");n.required=!0,n.maxLength=48;const r=f.wrapInDiv(e,n),o=Yt(n.value);o.addEventListener("click",(t=>{ht.projectTitleValidation(n.value)?alert("Your title cannot contain a word that is too long(11+ letters)\nor no words because I don't like it\n\nDo better this time"):(ht.createProject(n.value),Mt.regenerateProjects(),ft.setStorage(),f.closePopUp(t))}));const a=document.createElement("form");return f.appendElement(a,[r,o]),[t,a]}return t.classList.add("project-popUp"),f.appendElement(t,e()),t}},task:function(){if(!f.popUpState.isShown()){const t=Nt;function e(){const t=Ut("Create Task"),e=f.createBasicLabel("Title:","task-title-input"),n=f.createBasicInput("text","task-title-input","task-title-input");n.required=!0,n.maxLength=28;const r=f.wrapInDiv(e,n),o=f.createBasicLabel("Due Date:","task-due-date-input"),a=f.createBasicInput("date","task-due-date-input","task-due-date-input");a.required=!0,a.addEventListener("input",(t=>{const e=st(new Date,"yyyy-MM-dd");-1===ct(e,t.target.value)||0===ct(e,t.target.value)?t.target.setCustomValidity(""):t.target.setCustomValidity("Invalid field.")}));const i=f.wrapInDiv(o,a),s=f.createBasicLabel("Description:","task-description-input"),c=f.createBasicInput("text","task-description-input","task-description-input"),d=f.wrapInDiv(s,c),u=f.createBasicLabel("Priority:","task-priority-input"),l=f.createBasicInput("range","task-priority-input","task-priority-input"),A=document.createElement("span");l.setAttribute("min","1"),l.setAttribute("max","5"),l.addEventListener("input",(()=>A.textContent=l.value)),A.textContent=l.value;const m=f.wrapInDiv(u,f.wrapInDiv(l,A)),p=f.createBasicLabel("Notes:","task-notes-input"),g=f.createBasicInput("text","task-notes-input","task-notes-input"),C=f.wrapInDiv(p,g),h=Yt();h.addEventListener("click",(t=>{dt.validateInputs(n.value,a.value,c.value,l.value,g.value)?(dt.createTask(n.value,a.value,c.value,l.value,g.value),St.loadProjectTasks(),xt(),ft.setStorage(),f.closePopUp(t)):alert("Please ensure the title is less than 28 characters \nand the due date is beyond today's date")}));const b=document.createElement("form");return f.appendElement(b,[r,i,d,m,C,h]),[t,b]}return f.appendElement(t,e()),t}},editTask:function(){if(!f.popUpState.isShown()){const t=Nt,e=dt.getCurrentTask();function n(){const t=Ut(`Edit Task: ${e.title}`),n=f.createBasicLabel("Title:","task-title-input"),r=f.createBasicInput("text","task-title-input","task-title-input");r.required=!0,r.maxLength=28;const o=f.wrapInDiv(n,r),a=f.createBasicLabel("Due Date:","task-due-date-input"),i=f.createBasicInput("date","task-due-date-input","task-due-date-input");i.required=!0,i.addEventListener("input",(t=>{const n=e.creationDate;-1===ct(n,t.target.value)||0===ct(n,t.target.value)?t.target.setCustomValidity(""):t.target.setCustomValidity("Invalid field.")}));const s=f.wrapInDiv(a,i),c=f.createBasicLabel("Description:","task-description-input"),d=f.createBasicInput("text","task-description-input","task-description-input"),u=f.wrapInDiv(c,d),l=f.createBasicLabel("Priority:","task-priority-input"),A=f.createBasicInput("range","task-priority-input","task-priority-input"),m=document.createElement("span");A.setAttribute("min","1"),A.setAttribute("max","5"),A.addEventListener("input",(()=>m.textContent=A.value)),m.textContent=A.value;const p=f.wrapInDiv(l,f.wrapInDiv(A,m)),g=f.createBasicLabel("Notes:","task-notes-input"),C=f.createBasicInput("text","task-notes-input","task-notes-input"),h=f.wrapInDiv(g,C),b=Yt();b.addEventListener("click",(t=>{dt.validateInputs(r.value,i.value,d.value,A.value,C.value)?(e.appendTask(r.value,i.value,d.value,A.value,C.value),St.loadProjectTasks(),xt(),ft.setStorage(),f.closePopUp(t)):alert("Please ensure the title is less than 28 characters \nand the due date is beyond today's date")}));const k=document.createElement("form");return f.appendElement(k,[o,s,u,p,h,b]),[t,k]}return f.appendElement(t,n()),t}}},Nt=document.createElement("div");function Ut(t){const e=document.createElement("h3"),n=document.createElement("button"),r=f.wrapInDiv(e,n);return r.classList="popUp-header",e.textContent=t,n.textContent="X",n.classList="exit-button",n.addEventListener("click",(t=>f.closePopUp(t))),r}function Yt(){const t=document.createElement("button");return t.type="button",t.classList="submit-button",t.textContent="Submit",t}Nt.id="popUp",function(){const t=document.getElementById("content");t.appendChild(function(){const t=document.createElement("div");return t.id="nav-bar",f.appendElement(t,function(){const t=document.createElement("h1");t.id="logo",t.textContent="To-Doodle";const e=document.createElement("span");e.textContent="Projects";const n=document.createElement("span");n.textContent="Calendar";const r=document.createElement("span");r.textContent="Contact Info";const o=document.createElement("button");return o.id="create-task",o.textContent="Create Task",o.addEventListener("click",(()=>{f.showPopUp(qt.task())})),[t,e,n,r,o]}()),t}()),t.appendChild(Mt.firstLoad()),t.appendChild(St.firstLoad()),xt()}()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,